{
	// インポート
	"deque": {
		"prefix": "deque",
		"body": [
				"from collections import deque",
		],
		"description": ""
	},

	"numpy": {
		"prefix": "numpy",
		"body": [
				"import numpy as np",
		],
		"description": ""
	},

	"setrecursionlimit": {
		"prefix": "setrecursionlimit",
		"body": [
				"import sys",
				"sys.setrecursionlimit(10 ** 6)",
		],
		"description": ""
	},

	"lrucache": {
		"prefix": "lrucache",
		"body": [
				"from functools import lru_cache",
		],
		"description": ""
	},

	// 入力
	"mapint": {
		"prefix": "mapint",
		"body": [
				"map(int, input().split())",
		],
		"description": ""
	},

	"int": {
		"prefix": "int",
		"body": [
				"int(input())",
		],
		"description": ""
	},

	"listint": {
		"prefix": "listint",
		"body": [
				"list(map(int, input().split()))",
		],
		"description": ""
	},

	"input": {
		"prefix": "input",
		"body": [
				"input()",
		],
		"description": ""
	},

	"yes": {
		"prefix": "yes",
		"body": [
				"print('Yes')",
		],
		"description": ""
	},

	"no": {
		"prefix": "no",
		"body": [
				"print('No')",
		],
		"description": ""
	},

	// 定数
	"inf": {
		"prefix": "inf",
		"body": [
				"INF = 10 ** 18",
		],
		"description": ""
	},

	"mod": {
		"prefix": "mod",
		"body": [
				"MOD = 998244353",
		],
		"description": ""
	},

	// データ構造
	"UnionFind": {
		"prefix": "uf",
		"body": [
			"class UnionFind:",
			"    def __init__(self, n):",
			"        self.parent = [-1] * n",
			"",
			"    def find(self, x):",
			"        if self.parent[x] < 0:",
			"            return x",
			"        else:",
			"            self.parent[x] = self.find(self.parent[x])",
			"            return self.parent[x]",
			"    ",
			"    def unite(self, x, y):",
			"        x = self.find(x)",
			"        y = self.find(y)",
			"        ",
			"        if x == y:",
			"            return",
			"    ",
			"        # 要素数が大きい方に小さいほうを加える",
			"        # yの方が要素数が大きい場合",
			"        if self.parent[x] > self.parent[y]:",
			"            x, y = y, x",
			"        ",
			"        # xを親にする",
			"        self.parent[x] += self.parent[y]",
			"        self.parent[y] = x",
			"",
			"    def is_same(self, x, y):",
			"        return self.find(x) == self.find(y)",
			"",
			"    def size(self, x):",
			"        return -self.parent[self.find(x)]"
		],
		"description": "UnionFind"
	},
}